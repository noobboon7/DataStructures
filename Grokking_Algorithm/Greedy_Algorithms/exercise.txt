---Exercises -------------------------
8.1
You work for a furniture company, and you have to ship furniture
all over the country. You need to pack your truck with boxes. All
the boxes are of different sizes, and you’re trying to maximize the space you use in each truck. 
How would you pick boxes to maximize space? 
Come up with a greedy strategy. Will that give you the optimal solution?

My response: If the boxes are sorted by their volume, then the greedy strategy will be to put the smallest box first, and then the next smallest box, and so on. this why we can ship as many boxes as we can in the truck.

Answer: A greedy strategy would be to pick the largest box that will fit in the remaining space, and repeat until you can’t pack any more boxes. No, this won’t give you the optimal solution.
----------------------------------------------------------------------------------------------------------------------
8.2
You’re going to Europe, and you have seven days to see everything you can. You assign a point value to each item (how much you want to see it) and estimate how long it takes. How can you maximize the point total (seeing all the things you really want to see) during your stay? Come up with a greedy strategy. Will that give you the optimal solution?


My response: The greedy strategy is to put the items with the highest point value first, and then the next highest point value, and so on. However, depending how far the highest point are in distance from each other then, choosing the highest point value will be the starting point for the greedy strategy, move to the next highest point value, from a connect point, and so on.

Answer: Keep picking the activity with the highest point value that you can still do in the time you have left. Stop when you can’t do anything else. No, this won’t give you the optimal solution.
----------------------------------------------------------------------------------------------------------------------
For each of these algorithms, say whether it’s a greedy algorithm or not. 

8.3 Quicksort - Not a greedy algorithm
Answer: No.

8.4 Breadth-first search - greedy algorithm
Answer: Yes.

8.5 Dijkstra’s algorithm - greedy algorithm
Answer: Yes.
-----------------------------------------------------------------------------------------------------------------------

8.6 A postman needs to deliver to 20 homes. He needs to find the shortest route that goes to all 20 homes. Is this an NP-complete problem?

My response: yes, this is a NP-complete problem. It would take factorial problem.

Answer: Yes.
-----------------------------------------------------------------------------------------------------------------------

8.7 Finding the largest clique in a set of people (a clique is a set of people who all know each other). Is this an NP-complete problem?

My response: Yes, because the would could be broken down into sets of people who know each other, and then the largest clique would be the largest set of people who know each other.

Answer: Yes.
-----------------------------------------------------------------------------------------------------------------------

8.8 You’re making a map of the USA, and you need to color adjacent states with different colors. You have to find the minimum number of colors you need so that no two adjacent states are the same color. Is this an NP-complete problem?

My response: No, this is not a np-complete problem. As long as the adjacent states are not the same color, then the minimum number of colors needed is the same as the number of adjacent states.

Answer: Yes.

Notes: 
• Greedy algorithms optimize locally, hoping to end up with a global optimum.
• NP-complete problems have no known fast solution.
• If you have an NP-complete problem, your best bet is to use an approximation algorithm.
• Greedy algorithms are easy to write and fast to run, so they make good approximation algorithms.